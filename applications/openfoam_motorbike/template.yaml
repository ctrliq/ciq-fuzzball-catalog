# Copyright 2025 CIQ, Inc. All rights reserved.
{{- $container := list .OpenFoamContainerUri .OpenFoamVersion | join ":" }}
{{- $wmdir := list .WmProjectDir .OpenFoamVersion | join "" }}
{{- $rc := list $wmdir "etc/bashrc" | join "/" }}
{{- $ts := now | unixEpoch }}
{{- $name := list (trim .ResultName) $ts | join "-" }}

version: v1
volumes:
  scratch:
    reference: volume://user/ephemeral
{{- if .S3Bucket }}
    egress:
      - source:
          uri: file://{{ $name }}.tar.gz
        destination:
          uri: s3://{{ trim .S3Bucket }}/{{ trim .ResultPath }}/{{ $name }}.tar.gz
          secret: {{- if .S3Secret }} {{ .S3Secret }}{{- else }}{{ fail "Please provide S3Secret to save results to S3"}}{{- end }}
{{- end }}
{{- if .DataVolume }}
  data:
    reference: {{ .DataVolume }}
{{- end }}

jobs:
  preprocess-model:
    image:
      uri: {{ $container }}
    command:
      - "/bin/bash"
      - "-c"
      - |
        cp -r {{$wmdir}}/tutorials/incompressible/simpleFoam/motorBike {{ $name }};
        cp {{ $name }}/system/decomposeParDict.6 {{ $name }}/system/decomposeParDict;

        cd {{ $name }}

        SUBDOMAINS=$(( {{.SimulationOrMeshJobCores}} * {{.SimulationOrMeshJobNodes}} ))
        sed -i "s/numberOfSubdomains\ 6/numberOfSubdomains\ ${SUBDOMAINS}/g" system/decomposeParDict;
        sed -i 's/\(3 2 1\)/{{.Coefficients}}/g' system/decomposeParDict;
        cat system/decomposeParDict;

        source {{$rc}};
        mkdir -p constant/triSurface;
        cp -f $FOAM_TUTORIALS/resources/geometry/motorBike.obj.gz constant/triSurface/;
        surfaceFeatureExtract;
        blockMesh;
        decomposePar;
    resource:
      cpu:
        cores: {{.UtilityJobCores}}
        affinity: NUMA
      memory:
        size: {{.UtilityJobMemory}}
    cwd: /scratch
    mounts:
      scratch:
        location: /scratch

  snappy-hex-mesh:
    image:
      uri: {{ $container }}
    command: ["/bin/bash", "-c", "source {{$rc}}; snappyHexMesh -overwrite -parallel;"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["preprocess-model"]

  toposet:
    image:
      uri: {{ $container }}
    command: ["/bin/bash", "-c", "source {{$rc}}; topoSet -parallel;"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["snappy-hex-mesh"]

  set-initial-conditions:
    image:
      uri: {{ $container }}
    command:
      - "/bin/bash"
      - "-c"
      - |
        source {{$rc}};
        source {{$wmdir}}/bin/tools/RunFunctions;
        restore0Dir -processor;
    resource:
      cpu:
        cores: {{.UtilityJobCores}}
        affinity: NUMA
      memory:
        size: {{.UtilityJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["toposet"]

  patch-summary:
    image:
      uri: {{ $container }}
    command: ["/bin/bash", "-c", "source {{$rc}}; patchSummary -parallel;"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["set-initial-conditions"]

  potential-foam:
    image:
      uri: {{ $container }}
    command: ["/bin/bash", "-c", "source {{$rc}}; potentialFoam -writephi -parallel"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["patch-summary"]

  check-mesh:
    image:
      uri: {{ $container }}
    command: ["/bin/bash", "-c", "source {{$rc}}; checkMesh -parallel -writeFields '(nonOrthoAngle)' -constant"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["potential-foam"]

  simple-foam:
    image:
      uri: {{ $container }}
    command: ["/bin/bash", "-c", "source {{$rc}}; simpleFoam -parallel"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["check-mesh"]

  reconstruct-mesh:
    image:
      uri: {{ $container }}
    command:
      - "/bin/bash"
      - "-c"
      - |
        source {{$rc}};
        reconstructParMesh -constant;
        reconstructPar -latestTime;
    resource:
      cpu:
        cores: {{.UtilityJobCores}}
        affinity: NUMA
      memory:
        size: {{.UtilityJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["simple-foam"]

  to-vtk:
    image:
      uri: {{ $container }}
    command:
      - "/bin/bash"
      - "-c"
      - |
        source {{$rc}};
        foamToVTK -parallel
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    requires: ["reconstruct-mesh"]

  tar-results:
    image:
      uri: docker://alpine:latest
    command:
      - /bin/sh
      - "-c"
      - |
        echo "${FB_WORKFLOW_ID}" > {{ $name }}/FB_WORKFLOW_ID
        if [[ -n "{{ trim .S3Bucket }}" ]] ; then
          tar -zcvf {{ $name }}.tar.gz {{ $name }}
        fi
        if [[ -n "{{ trim .DataVolume }}" ]] ; then
          mkdir -p /data/{{ trim .ResultPath }}
          cp -r {{ $name }} /data/{{ trim .ResultPath }}
        fi
    resource:
      cpu:
        cores: {{.UtilityJobCores}}
        affinity: NUMA
      memory:
        size: {{.UtilityJobMemory}}
    cwd: /scratch
    mounts:
      scratch:
        location: /scratch
{{- if .DataVolume }}
      data:
        location: /data
{{- end }}
    requires: ["to-vtk"]

{{- if .ParaviewContainerUri }}
  port-forwarding-info:
    image:
      uri: {{ .ParaviewContainerUri }}
    resource:
      cpu:
        cores: 1
      memory:
        size: 500MiB
    command:
      - /bin/bash
      - "-c"
      - |
        echo "Accessing the paraview server once it starts requires port-forwarding via the CLI:"
        echo
        echo "# fuzzball workflow port-forward ${FB_WORKFLOW_ID} paraview {{ .ParaviewPort }}:{{ .ParaviewPort }}"
    requires: ["to-vtk"]

  paraview:
    image:
      uri: {{ .ParaviewContainerUri }}
    command:
      - /opt/paraview/install/bin/pvserver
      - "--server-port={{ .ParaviewPort }}"
      - "--hostname=localhost"
    resource:
      cpu:
        cores: {{ .ParaviewCores }}
        affinity: NUMA
      memory:
        size: {{ .ParaviewMemory }}
    multinode:
      nodes: 1
      implementation: openmpi
    cwd: /scratch/{{ $name }}
    mounts:
      scratch:
        location: /scratch
    policy:
      timeout:
        execute: {{ .ParaviewTimeout }}
    requires: ["port-forwarding-info"]
{{- end }}
