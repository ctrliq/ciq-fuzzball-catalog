# Copyright 2025 CIQ, Inc. All rights reserved.
{{- $container := list .OpenFoamContainerUri .OpenFoamVersion | join ":" }}
{{- $wmdir := list .WmProjectDir .OpenFoamVersion | join "" }}
{{- $rc := list $wmdir "etc/bashrc" | join "/" }}

version: v1
volumes:
  scratch:
    reference: volume://user/ephemeral

jobs:
  preprocess-model:
    image:
      uri: "{{$container}}"
    command:
      - "/bin/bash"
      - "-xc"
      - |
        cp -r {{$wmdir}}/tutorials/incompressible/simpleFoam/motorBike .;
        cp motorBike/system/decomposeParDict.6 motorBike/system/decomposeParDict;

        cd motorBike

        SUBDOMAINS=$(( {{.SimulationOrMeshJobCores}} * {{.SimulationOrMeshJobNodes}} ))
        sed -i "s/numberOfSubdomains\ 6/numberOfSubdomains\ ${SUBDOMAINS}/g" system/decomposeParDict;
        sed -i 's/\(3 2 1\)/{{.Coefficients}}/g' system/decomposeParDict;
        cat system/decomposeParDict;

        source {{$rc}};
        mkdir -p constant/triSurface;
        cp -f $FOAM_TUTORIALS/resources/geometry/motorBike.obj.gz constant/triSurface/;
        surfaceFeatureExtract;
        blockMesh;
        decomposePar;
    resource:
      cpu:
        cores: {{.UtilityJobCores}}
        affinity: NUMA
      memory:
        size: {{.UtilityJobMemory}}
    cwd: /scratch
    mounts:
      scratch:
        location: /scratch

  snappy-hex-mesh:
    image:
      uri: "{{$container}}"
    command: ["/bin/bash", "-c", "source {{$rc}}; snappyHexMesh -overwrite -parallel;"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/motorBike
    mounts:
      scratch:
        location: /scratch
    requires: ["preprocess-model"]

  toposet:
    image:
      uri: "{{$container}}"
    command: ["/bin/bash", "-c", "source {{$rc}}; topoSet -parallel;"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/motorBike
    mounts:
      scratch:
        location: /scratch
    requires: ["snappy-hex-mesh"]

  set-initial-conditions:
    image:
      uri: "{{$container}}"
    command:
      - "/bin/bash"
      - "-xc"
      - |
        source {{$rc}};
        source {{$wmdir}}/bin/tools/RunFunctions;
        restore0Dir -processor;
    resource:
      cpu:
        cores: {{.UtilityJobCores}}
        affinity: NUMA
      memory:
        size: {{.UtilityJobMemory}}
    cwd: /scratch/motorBike
    mounts:
      scratch:
        location: /scratch
    requires: ["toposet"]

  patch-summary:
    image:
      uri: "{{$container}}"
    command: ["/bin/bash", "-c", "source {{$rc}}; patchSummary -parallel;"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/motorBike
    mounts:
      scratch:
        location: /scratch
    requires: ["set-initial-conditions"]

  potential-foam:
    image:
      uri: "{{$container}}"
    command: ["/bin/bash", "-c", "source {{$rc}}; potentialFoam -writephi -parallel"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/motorBike
    mounts:
      scratch:
        location: /scratch
    requires: ["patch-summary"]

  check-mesh:
    image:
      uri: "{{$container}}"
    command: ["/bin/bash", "-c", "source {{$rc}}; checkMesh -parallel -writeFields '(nonOrthoAngle)' -constant"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/motorBike
    mounts:
      scratch:
        location: /scratch
    requires: ["potential-foam"]

  simple-foam:
    image:
      uri: "{{$container}}"
    command: ["/bin/bash", "-c", "source {{$rc}}; simpleFoam -parallel"]
    multinode:
      nodes: {{.SimulationOrMeshJobNodes}}
      implementation: openmpi
    resource:
      cpu:
        cores: {{.SimulationOrMeshJobCores}}
        affinity: NUMA
      memory:
        size: {{.SimulationOrMeshJobMemory}}
    cwd: /scratch/motorBike
    mounts:
      scratch:
        location: /scratch
    requires: ["check-mesh"]

  reconstruct-mesh:
    image:
      uri: "{{$container}}"
    command:
      - "/bin/bash"
      - "-xc"
      - |
        source {{$rc}};
        reconstructParMesh -constant;
        reconstructPar -latestTime;
    resource:
      cpu:
        cores: {{.UtilityJobCores}}
        affinity: NUMA
      memory:
        size: {{.UtilityJobMemory}}
    cwd: /scratch/motorBike
    mounts:
      scratch:
        location: /scratch
    requires: ["simple-foam"]

  tar-results:
    image:
      uri: "{{$container}}"
    command: ["/bin/bash", "-c", "tar -zcvf openfoam-results.tar.gz motorBike"]
    resource:
      cpu:
        cores: {{.UtilityJobCores}}
        affinity: NUMA
      memory:
        size: {{.UtilityJobMemory}}
    cwd: /scratch
    mounts:
      scratch:
        location: /scratch
    requires: ["reconstruct-mesh"]
